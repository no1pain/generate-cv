"use client";

import { useState } from "react";
import Link from "next/link";
import ResumeForm from "@/components/ResumeForm";
import ResumePreview from "@/components/ResumePreview";
import { ResumeFormData, GeneratedResume } from "@/types";
import { useLanguage } from "@/context/LanguageContext";
import { useAuth } from "@/context/AuthContext";
import Navbar from "@/components/Navbar";
import PremiumBadge from "@/components/PremiumBadge";

export default function GeneratePage() {
  const { t } = useLanguage();
  const { isPremium } = useAuth();
  const [isLoading, setIsLoading] = useState(false);
  const [resume, setResume] = useState<GeneratedResume>({ text: "" });
  const [activeTab, setActiveTab] = useState("form"); // "form" or "preview"
  const [showTemplateSelector, setShowTemplateSelector] = useState(false);
  const [selectedTemplate, setSelectedTemplate] = useState("basic");
  const [showPremiumModal, setShowPremiumModal] = useState(false);
  const [usingOpenAI, setUsingOpenAI] = useState(false);
  const [aiModel, setAiModel] = useState("");

  const templates = [
    { id: "basic", name: "Basic", isPremium: false },
    { id: "modern", name: "Modern", isPremium: false },
    { id: "executive", name: "Executive", isPremium: true },
    { id: "creative", name: "Creative Pro", isPremium: true },
    { id: "technical", name: "Technical", isPremium: true },
  ];

  const handleSubmit = async (data: ResumeFormData) => {
    setIsLoading(true);
    setUsingOpenAI(false);
    setAiModel("");

    try {
      const response = await fetch("/api/generate-resume", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ ...data, template: selectedTemplate }),
      });

      if (!response.ok) {
        throw new Error("Failed to generate resume");
      }

      const result = await response.json();
      setResume({ text: result.text });

      // Check if we used OpenAI
      if (result.usingOpenAI) {
        setUsingOpenAI(true);
        setAiModel(result.model || "GPT-4o");
      }

      // On mobile, switch to preview tab after generation
      if (window.innerWidth < 1024) {
        setActiveTab("preview");
      }
    } catch (error) {
      console.error("Error generating resume:", error);
      alert("Error generating resume. Please try again.");
    } finally {
      setIsLoading(false);
    }
  };

  const handleTemplateSelect = (templateId: string) => {
    const template = templates.find((t) => t.id === templateId);
    if (template?.isPremium && !isPremium) {
      setShowPremiumModal(true);
    } else {
      setSelectedTemplate(templateId);
    }
    setShowTemplateSelector(false);
  };

  return (
    <div className="min-h-screen bg-gray-800">
      <Navbar />

      <main className="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
        <div className="mb-8">
          <h2 className="text-2xl font-bold mb-2 text-gray-200">
            Create Your Professional Resume
          </h2>
          <p className="text-gray-400">
            Fill out the form with your information, choose the job type and get
            a ready-to-use resume generated by artificial intelligence. Our AI
            will tailor your resume to highlight relevant skills and experience.
          </p>
        </div>

        {/* OpenAI Status Indicator */}
        <div className="mb-6 bg-blue-900/30 rounded-lg p-3 border border-blue-800 relative">
          <div className="flex items-center">
            <div className="mr-3">
              <div className="h-3 w-3 rounded-full bg-blue-400 relative flex items-center justify-center">
                <span className="animate-ping absolute h-3 w-3 rounded-full bg-blue-500 opacity-75"></span>
              </div>
            </div>
            <div>
              <h3 className="text-sm font-medium text-blue-300">
                OpenAI integration {usingOpenAI ? "active" : "ready"}
              </h3>
              <p className="text-xs text-blue-400 mt-0.5">
                {usingOpenAI
                  ? `Generated with ${aiModel}`
                  : "Your resumes will be generated using advanced AI capabilities"}
              </p>
            </div>
          </div>
        </div>

        {/* Template Selector */}
        <div className="mb-6 bg-gray-700 rounded-lg p-4 border border-gray-600 relative">
          <div className="flex justify-between items-center">
            <div>
              <h3 className="text-lg font-medium text-gray-200 mb-1">
                Template:{" "}
                {templates.find((t) => t.id === selectedTemplate)?.name}
              </h3>
              <p className="text-sm text-gray-400">
                Choose a template for your resume
              </p>
            </div>
            <button
              className="bg-gray-600 hover:bg-gray-500 text-white px-3 py-1 rounded-md text-sm transition-colors"
              onClick={() => setShowTemplateSelector(!showTemplateSelector)}
            >
              Change Template
            </button>
          </div>

          {showTemplateSelector && (
            <div className="absolute top-full left-0 right-0 mt-2 bg-gray-700 rounded-lg border border-gray-600 p-4 z-10 shadow-xl">
              <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
                {templates.map((template) => (
                  <div
                    key={template.id}
                    className={`relative rounded-lg overflow-hidden cursor-pointer transform transition-transform hover:scale-105 ${
                      selectedTemplate === template.id
                        ? "ring-2 ring-blue-500"
                        : ""
                    }`}
                    onClick={() => handleTemplateSelect(template.id)}
                  >
                    <div
                      className={`h-40 ${
                        template.id === "basic"
                          ? "bg-gray-600"
                          : template.id === "modern"
                          ? "bg-gradient-to-br from-blue-800 to-blue-900"
                          : template.id === "executive"
                          ? "bg-gradient-to-br from-gray-700 to-gray-900"
                          : template.id === "creative"
                          ? "bg-gradient-to-br from-purple-800 to-purple-900"
                          : "bg-gradient-to-br from-blue-900 to-gray-900"
                      }`}
                    >
                      <div className="p-3">
                        <div className="h-2 w-16 bg-white/30 rounded mb-1"></div>
                        <div className="h-2 w-10 bg-white/20 rounded mb-3"></div>

                        <div className="h-1 w-full bg-white/10 rounded mb-1"></div>
                        <div className="h-1 w-full bg-white/10 rounded mb-1"></div>
                        <div className="h-1 w-2/3 bg-white/10 rounded mb-3"></div>

                        <div className="h-1 w-full bg-white/10 rounded mb-1"></div>
                        <div className="h-1 w-full bg-white/10 rounded mb-1"></div>
                        <div className="h-1 w-2/3 bg-white/10 rounded mb-1"></div>
                      </div>
                    </div>
                    <div className="absolute bottom-0 inset-x-0 bg-gray-800/80 py-1 px-2 text-center">
                      <div className="text-sm text-gray-200">
                        {template.name}
                      </div>
                    </div>

                    {template.isPremium && (
                      <div className="absolute top-1 right-1">
                        <div className="bg-amber-500 text-xs text-gray-900 font-bold px-1.5 py-0.5 rounded-sm">
                          PRO
                        </div>
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>

        {/* Mobile Tabs */}
        <div className="lg:hidden flex border-b border-gray-600 mb-6">
          <button
            className={`px-4 py-2 font-medium ${
              activeTab === "form"
                ? "text-blue-400 border-b-2 border-blue-400"
                : "text-gray-400"
            }`}
            onClick={() => setActiveTab("form")}
          >
            Form
          </button>
          <button
            className={`px-4 py-2 font-medium ${
              activeTab === "preview"
                ? "text-blue-400 border-b-2 border-blue-400"
                : "text-gray-400"
            }`}
            onClick={() => setActiveTab("preview")}
          >
            Preview
          </button>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          <div
            className={`lg:block ${activeTab === "form" ? "block" : "hidden"}`}
          >
            <div className="bg-gray-700 rounded-lg p-6 border border-gray-600 shadow-md">
              <h3 className="text-xl font-semibold mb-4 text-gray-200">
                Enter Your Details
              </h3>
              <ResumeForm onSubmit={handleSubmit} isLoading={isLoading} />
            </div>
          </div>

          <div
            className={`lg:block ${
              activeTab === "preview" ? "block" : "hidden"
            }`}
          >
            <div className="sticky top-24 self-start">
              <div className="bg-gray-700 rounded-lg p-6 border border-gray-600 shadow-md">
                <div className="flex justify-between items-center mb-4">
                  <h3 className="text-xl font-semibold text-gray-200">
                    Resume Preview
                  </h3>

                  {resume.text && (
                    <div className="flex space-x-2">
                      <button
                        className="bg-gray-600 hover:bg-gray-500 text-white px-3 py-1 rounded-md text-sm transition-colors flex items-center"
                        onClick={() => {
                          navigator.clipboard.writeText(resume.text);
                          alert("Resume copied to clipboard!");
                        }}
                      >
                        <svg
                          className="w-4 h-4 mr-1"
                          fill="none"
                          viewBox="0 0 24 24"
                          stroke="currentColor"
                        >
                          <path
                            strokeLinecap="round"
                            strokeLinejoin="round"
                            strokeWidth={2}
                            d="M8 5H6a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2v-1M8 5a2 2 0 002 2h2a2 2 0 002-2M8 5a2 2 0 012-2h2a2 2 0 012 2m0 0h2a2 2 0 012 2v3m2 4H10m0 0l3-3m-3 3l3 3"
                          />
                        </svg>
                        Copy
                      </button>

                      <button
                        className="relative group"
                        onClick={() => !isPremium && setShowPremiumModal(true)}
                      >
                        <div className="bg-gray-600 hover:bg-gray-500 text-white px-3 py-1 rounded-md text-sm transition-colors flex items-center">
                          <svg
                            className="w-4 h-4 mr-1"
                            fill="none"
                            viewBox="0 0 24 24"
                            stroke="currentColor"
                          >
                            <path
                              strokeLinecap="round"
                              strokeLinejoin="round"
                              strokeWidth={2}
                              d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"
                            />
                          </svg>
                          PDF
                        </div>

                        {!isPremium && (
                          <div className="absolute -top-1 -right-1 flex h-3 w-3">
                            <span className="relative inline-flex rounded-full h-3 w-3 bg-amber-500"></span>
                          </div>
                        )}
                      </button>
                    </div>
                  )}
                </div>
                <ResumePreview resume={resume} isLoading={isLoading} />
              </div>
            </div>
          </div>
        </div>

        <div className="mt-12 bg-gray-700 rounded-lg p-6 border border-gray-600">
          <div className="flex justify-between items-start">
            <div>
              <h3 className="text-xl font-semibold mb-4 text-gray-200">
                Tips for a Great Resume
              </h3>
              <ul className="list-disc pl-5 text-gray-300 space-y-2">
                <li>Use action verbs to describe your achievements</li>
                <li>
                  Quantify your accomplishments with numbers when possible
                </li>
                <li>Tailor your resume to each specific job application</li>
                <li>
                  Keep your resume concise and focused on relevant information
                </li>
                <li>Make sure your contact information is up to date</li>
              </ul>
            </div>

            {!isPremium && (
              <div className="bg-gray-800 rounded-lg p-4 border border-gray-600 max-w-xs">
                <div className="flex justify-between items-start mb-2">
                  <h4 className="text-lg font-medium text-gray-200">
                    Upgrade to Premium
                  </h4>
                  <PremiumBadge />
                </div>
                <p className="text-sm text-gray-400 mb-3">
                  Access premium templates, PDF downloads, and advanced AI
                  options
                </p>
                <Link
                  href="/support"
                  className="block text-center text-sm bg-blue-600 text-white py-2 px-4 rounded hover:bg-blue-700 transition-colors"
                >
                  Learn More
                </Link>
              </div>
            )}
          </div>
        </div>
      </main>

      {/* Premium Modal */}
      {showPremiumModal && (
        <div className="fixed inset-0 bg-black/70 flex items-center justify-center z-50 p-4">
          <div className="bg-gray-800 rounded-lg max-w-md w-full border border-gray-700 shadow-xl relative overflow-hidden">
            <button
              onClick={() => setShowPremiumModal(false)}
              className="absolute top-2 right-2 text-gray-400 hover:text-white"
            >
              <svg
                className="w-5 h-5"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth="2"
                  d="M6 18L18 6M6 6l12 12"
                ></path>
              </svg>
            </button>

            <div className="p-6">
              <div className="flex justify-center mb-4">
                <PremiumBadge />
              </div>
              <h3 className="text-xl font-bold text-center text-gray-100 mb-4">
                Premium Feature
              </h3>
              <p className="text-gray-300 text-center mb-6">
                This feature is only available with our premium plan. Upgrade
                now to access premium templates, PDF downloads, and more!
              </p>
              <div className="flex flex-col space-y-3">
                <Link
                  href="/support"
                  className="block text-center bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 transition-colors"
                >
                  Upgrade to Premium
                </Link>
                <button
                  onClick={() => setShowPremiumModal(false)}
                  className="text-blue-400 hover:text-blue-300 text-sm"
                >
                  Not now
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      <footer className="bg-gray-900 shadow-inner mt-12">
        <div className="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
          <p className="text-center text-gray-400 text-sm">{t.footerRights}</p>
          <p className="text-center text-gray-400 text-sm mt-1">
            <Link href="/support" className="text-blue-400 hover:underline">
              {t.supportProject}
            </Link>
          </p>
        </div>
      </footer>
    </div>
  );
}
